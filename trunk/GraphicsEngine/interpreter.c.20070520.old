// interpreter.c - v4
//  o not a stand-alone application
//  o contains functions for Graphics Engine
//  o ekhan@cs 18mar07

//  o ekhan@cs 27apr07 - turn off debug (no printfs)

#include <stdio.h>
#include <stdlib.h> // for atoi
#include <string.h>

#include <libxml/parser.h>
#include <libxml/xmlmemory.h>

//#include "interpreter.h"

//#ifndef INTRPRDEF
#include "interpreter.h"
//#endif

//24mar# define SFILENAMELEN 100	// length of session file
# define DEBUG 1			// for debugging

//24marchar sessionFile[SFILENAMELEN] ;
char * sessionFile;                       // <--- (2) manually set the sessionFile
char * defaultSessionFile = "C:\\683working\\test10.xml" ;		// will be replaced by gui

xmlDocPtr xDoc;			// ptr to xml doc
xmlNodePtr rootNode;	// keep ptr to root node in case we have to traverse again
xmlNodePtr sessNode;	// ptr to session node
xmlNodePtr trialsNode;	// ptr to trials node (set during getSessionParams function)

char * xmlRootName = "experiment" ;	// name of root node (for error-checking)
char * xmlSessName = "session" ;    // name of session node (for looping)
char * xmlTrialsName = "trials" ;	// name of trials node
char * xmlTrialName  = "trial";
char * xmlObjectsName = "objects";
char * xmlObjectName  = "object";
char * xmlNumberName  = "number";
char * xmlConditionName = "condition";

xmlNodePtr currNode;	// ptr to current node (convenience var for parsing child nodes)
xmlNodePtr currTrNode;	// hold current trial node 
int currTrNum=0;		// hold current trial number

/* declarations */
int initTablesValues(void);		// for init: calculate size/count values for lookup tables
void initTLookupTable(void);	// for init: lookup table (trial info)
void initOLookupTable(void);	// for init: lookup table (object info)
void printTLookupTable(void);   // for init: debug
void printOLookupTable(void);	// for init: debug
void * findTableEntry (const char *targetName, const void *arrayName, int count);	// for init: lookup into array
int param_cmp (const struct offsets *str1, const struct offsets *str2);				// for init: sorting lookup table
void getSessionFile(void);		// for init: get session file
int getXmlTree(void);			// for init: get xml doc pointer
int getXmlRootNode(void);			// for init: get xml root node
int getXmlSessionNode(void);		// for init: get xml session node and parameters
int getSessionParams(void);			// for init: get session parameters & set trialsNode

int getTrialParams(int tNum);		// get trial parameters & set objsNode
int resetTparams(void);				// reset trialParams struct to initial values

void printNodes(xmlNodePtr xnptr, int boolPrintTextNodes); // for debug

int getObjsParams (xmlNodePtr objsNodePtr);
void printTrialInfo(void);		// for debug

//for session file
extern int doGUI(void);
extern int getFileName(char * buf);

struct offsets {
	const char * name ;
	int value ; // the offset
	int type ;
};
struct offsets oLookupTable[] =
{
	{"objNum", -1, 'i'},
	//{"objFile", -1, 'c'},
	{"objPath", -1, 'c'},
	{"objIsTarget", -1, 'i'},
	{"objPanel", -1, 'i'},
	{"objMinSpeedH", -1, 'i'},
	{"objMaxSpeedH", -1, 'i'},
	{"objMinSpeedV", -1, 'i'},
	{"objMaxSpeedV", -1, 'i'}
};
struct offsets tLookupTable[] = 
{
	{"trialNum", -1, 'i'},
	{"condNum", -1, 'i'},
    {"condName", -1, 'c'},
	{"isFixMarker", -1, 'i'},
	{"duration", -1, 'i'},
	{"gridDisplay", -1, 'i'},
	{"bgColorA", -1, 'i'},
	{"bgColorR", -1, 'i'},
	{"bgColorG", -1, 'i'},
	{"bgColorB", -1, 'i'},
	{"fgColorA", -1, 'i'},
    {"fgColorR", -1, 'i'},
	{"fgColorG", -1, 'i'},
	{"fgColorB", -1, 'i'},
	{"isBounce", -1, 'i'},
	{"minBounceDist", -1, 'i'},
	{"minStartDist", -1, 'i'},
	{"numObjects", -1, 'i'},
	{"numTargets", -1, 'i'},
	{"objInfo", -1, 'p'}
};

int sizeOffsets;  		// size of "offsets" struct
int numElemTtable;		// number of elements in tLookupTable
int numElemOtable;		// number of elements in oLookupTable
int sizeOparams;		// size of "oparams" struct

char typeI = 'i';					// for comparing to lookup_table types
char typeC = 'c';					// for comparing to lookup_table types


/*******************
 * BA: for bypassing the gui and picking a session file each time:
 *  (1) comment out the getSessionFile line below    
 *  (2) manually set the session file in the global vars
 */

/******************/
/* initialization */
/******************/
int initInterp() {
	int returnCode = 0;
	initTablesValues();
	initTLookupTable();
	initOLookupTable();
	if (DEBUG) printTLookupTable();
	if (DEBUG) printOLookupTable();
	getSessionFile();                      // <--- (1) don't run the gui
	returnCode=getXmlTree();	if (returnCode != 0) { return returnCode; }
	returnCode=getXmlRootNode();	if (returnCode != 0) { return returnCode; }
	returnCode=getXmlSessionNode();	if (returnCode != 0) { return returnCode; }
	returnCode=getSessionParams();	if (returnCode != 0) { return returnCode; }
	return 0;
}

/*****************************************/
/* initialization - supporting functions */
/*****************************************/

/**************************
 * initialize lookup tables 
 *    initTLookupTable();
 *    initOLookupTable();
 *    printTLookupTable();  [for debug]
 *    printOLookupTable();  [for debug]
 *    findTableEntry();
 *    param_cmp();
 **************************/

int initTablesValues(void){
	/* o calculate the size/count values of the lookup table 
	 *   (needed for findTableEntry function)
	 */
	sizeOffsets   = sizeof (struct offsets);				// size of "offsets" struct
	numElemTtable = sizeof (tLookupTable) / sizeOffsets;	// number of elements in tLookupTable
	numElemOtable = sizeof (oLookupTable) / sizeOffsets;	// number of elements in oLookupTable
	sizeOparams   = sizeof (struct oparams);				// size of "oparams" struct
	return 0;
}

void initTLookupTable(void) {
	/* o get "count" of structs (needed for sort) 
	 * o sorts the table (needed for bsearch)
	 * o for each parameter: finds offset
	 *                       finds parameter/element in lookup table (extra test that lookup table works)
	 *                       enters offset into lookup table
	 */

	
	struct offsets * element;	// ptr to found struct in array
	
	int count = sizeof (tLookupTable) / sizeof (struct offsets);		// get count

	qsort (tLookupTable, count, sizeof (struct offsets), param_cmp);	// sort
	
	// (step-by-step code)
	//int offset;	// offset of param inside struct ("offset" is the value to load)
	//offset = offsetof(struct tparams, trialNum);
	//element = findTableEntry("trialNum",tLookupTable,count);
	//element->value = offset ;
	
	element = findTableEntry("trialNum",tLookupTable,count);	element->value = offsetof(struct tparams, trialNum);
	element = findTableEntry("condNum",tLookupTable,count);		element->value = offsetof(struct tparams, condNum);
	element = findTableEntry("condName",tLookupTable,count);	element->value = offsetof(struct tparams, condName);
	element = findTableEntry("isFixMarker",tLookupTable,count);	element->value = offsetof(struct tparams, isFixMarker);
	element = findTableEntry("duration",tLookupTable,count);	element->value = offsetof(struct tparams, duration);
	element = findTableEntry("gridDisplay",tLookupTable,count);	element->value = offsetof(struct tparams, gridDisplay);
    element = findTableEntry("bgColorA",tLookupTable,count);	element->value = offsetof(struct tparams, bgColorA);
	element = findTableEntry("bgColorR",tLookupTable,count);	element->value = offsetof(struct tparams, bgColorR);
	element = findTableEntry("bgColorG",tLookupTable,count);	element->value = offsetof(struct tparams, bgColorG);
	element = findTableEntry("bgColorB",tLookupTable,count);	element->value = offsetof(struct tparams, bgColorB);
    element = findTableEntry("fgColorA",tLookupTable,count);	element->value = offsetof(struct tparams, fgColorA);
	element = findTableEntry("fgColorR",tLookupTable,count);	element->value = offsetof(struct tparams, fgColorR);
    element = findTableEntry("fgColorG",tLookupTable,count);	element->value = offsetof(struct tparams, fgColorG);
    element = findTableEntry("fgColorB",tLookupTable,count);	element->value = offsetof(struct tparams, fgColorB);
	element = findTableEntry("isBounce",tLookupTable,count);	element->value = offsetof(struct tparams, isBounce);
	element = findTableEntry("minBounceDist",tLookupTable,count);	element->value = offsetof(struct tparams, minBounceDist);
	element = findTableEntry("minStartDist",tLookupTable,count);	element->value = offsetof(struct tparams, minStartDist);
	element = findTableEntry("numObjects",tLookupTable,count);		element->value = offsetof(struct tparams, numObjects);
	element = findTableEntry("numTargets",tLookupTable,count);		element->value = offsetof(struct tparams, numTargets);
	element = findTableEntry("objInfo",tLookupTable,count);			element->value = offsetof(struct tparams, objInfo);
}

void initOLookupTable(void) {
	// two separate functions for trials and objects structs to avoid "if object ... else if trial" comparison later in code
	struct offsets * element;	// ptr to found struct in array
	int count = sizeof (oLookupTable) / sizeof (struct offsets);		// get count
	qsort (oLookupTable, count, sizeof (struct offsets), param_cmp);	// sort

	element = findTableEntry("objNum",oLookupTable,count);		element->value = offsetof(struct oparams, objNum);
    //element = findTableEntry("objFile",oLookupTable,count);		element->value = offsetof(struct oparams, objFile);
    element = findTableEntry("objPath",oLookupTable,count);		element->value = offsetof(struct oparams, objPath);
	element = findTableEntry("objIsTarget",oLookupTable,count);	element->value = offsetof(struct oparams, objIsTarget);
	element = findTableEntry("objPanel",oLookupTable,count);	element->value = offsetof(struct oparams, objPanel);
	element = findTableEntry("objMinSpeedH",oLookupTable,count);	element->value = offsetof(struct oparams, objMinSpeedH);
	element = findTableEntry("objMaxSpeedH",oLookupTable,count);	element->value = offsetof(struct oparams, objMaxSpeedH);
    element = findTableEntry("objMinSpeedV",oLookupTable,count);	element->value = offsetof(struct oparams, objMinSpeedV);
	element = findTableEntry("objMaxSpeedV",oLookupTable,count);	element->value = offsetof(struct oparams, objMaxSpeedV);
}

void printTLookupTable(void) {
	// o debug function
	
	int i ;
	int count = sizeof (tLookupTable) / sizeof (struct offsets);

	printf(" debug: printTLookupTable - begin\n");
	for (i = 0; i < count; i++) {
		printf ("  param name=%s\toffset in lookup table=%d\n", tLookupTable[i].name, tLookupTable[i].value);
    }
	printf (" debug: printTLookupTable - end\n");

	return ;
}

void printOLookupTable(void){
	// o debug function
	int i;
	int count=sizeof(oLookupTable) / sizeof(struct offsets);

	printf(" debug: printOLookupTable - begin\n");
	for (i = 0; i < count; i++) {
		printf ("  param name=%s\toffset in lookup table=%d\n", oLookupTable[i].name, oLookupTable[i].value);
    }
	printf (" debug: printTLookupTable - end\n");
}

void * findTableEntry (const char *targetName, const void *arrayName, int numElements) {
	/* o perform a lookup into a sorted array
	 * o return ptr to found element
	 * o ref:  http://libiya.upf.es/www-storage/glibc/libc_9.html
	 */

	struct offsets target;		// have to give bsearch something to compare to
	struct offsets * result;	// ptr to struct in lookup table (where "offset" will be stored)

	target.name = targetName;
	result = bsearch (&target, arrayName, numElements, sizeOffsets, param_cmp);
		// bsearch returns either pointer to an object or null

	//debug
	//if (result) printf ("Result:  %s %d\n", result->name, result->value);
	//else printf ("ERROR: Couldn't find %s.\n", targetName);

	// needs to be better error-checking here
	//fordebug
	//if (!result) printf ("ERROR: Couldn't find %s.\n", targetName);

	return result ;
}


int param_cmp (const struct offsets *str1, const struct offsets *str2) {
	/* comparison function used for sorting and searching. 
	 * (http://libiya.upf.es/www-storage/glibc/libc_9.html)
	 */

	return strcmp (str1->name, str2->name);
}



/*******************
 * get session file 
 *******************/

void getSessionFile() {
	int leng, result;
	//char * buf;

	if (DEBUG) printf(" debug: getSessionFile - begin\n");
	
	leng = doGUI();				
	printf("len = %d\n",leng);
	
	//buf=(char *)malloc(leng);
	sessionFile=(char *)malloc(leng);   
	result = getFileName(sessionFile);

	printf("buf = %s\n",sessionFile);
	printf("result = %d\n",result);
	//return 0;

	/* for debug */
	//if (argc == 1) {
	//	printf("Debug: no args: using default session file\n") ;
		//24marstrcpy(sessionFile,defaultSessionFile) ;
	//}
	/* end debug */

	//if (argc == 2) {
	//	printf("Debug: filename = %s\n",argv[1]) ;
	//	strcpy(sessionFile,argv[1]) ;
	//	/* to-do: check that file exists */
	//}

	if (DEBUG) printf("  using session file: %s\n",sessionFile);
	if (DEBUG) printf(" debug: getSessionFile - end\n");
}

/***************
 * xml functions
 ***************/
int getXmlTree(void){
	if (DEBUG) printf(" debug: getXmlTree - begin\n");

	/* get tree */
	xDoc = xmlParseFile(sessionFile) ;
	
	if (xDoc == NULL ) {
		fprintf(stderr,"Document not parsed successfully. \n");
		return 1;
	}

	if (DEBUG) printf(" debug: getXmlTree - end\n");
	return 0;
}

int getXmlRootNode(void){
	if (DEBUG) printf(" debug: getXmlRootNode - begin\n");
	/* get root node */
	rootNode = xmlDocGetRootElement(xDoc);
	if (rootNode == NULL) {
		fprintf(stderr,"empty document\n");
		xmlFreeDoc(xDoc);
		return 1;
	}
	if (DEBUG) printf("  root element: \"%s\"\n",rootNode->name);

	if (xmlStrcmp(rootNode->name, (const xmlChar *) xmlRootName)) {
		fprintf(stderr,"document of the wrong type, root node != %s\n",xmlRootName);
		xmlFreeDoc(xDoc);
		return 1;
	}
	if (DEBUG) printf(" debug: getXmlRootNode - end\n");
	return 0;
}

int getXmlSessionNode(void){
	if (DEBUG) printf(" debug: getXmlSessionNode - begin\n");
	/* get session node */
	currNode = rootNode->xmlChildrenNode; // child node of root only holds "text" (whitespace) and "session", may hold "comment"

	/* loop thru child nodes until "session" */
	while (currNode != NULL) {
		if ((!xmlStrcmp(currNode->name, (const xmlChar *)xmlSessName))) {	// looking for "session"
			sessNode = currNode;
			break;
		}
		currNode = currNode->next;
	}

	/* check that we found something */
	if (sessNode == NULL) {
		printf("ERROR - didn't find session node\n");
		return 1;
	} 
	else {
		if (DEBUG) printf("  session element: \"%s\"\n",currNode->name);	
	}

	// for debug - can display child nodes of sessNode
	//printNodes(currNode,0);

	if (DEBUG) printf(" debug: getXmlSessionNode - end\n");
	return 0;
}

int getSessionParams() {
	/* action: (1) writes the values of child nodes displayX, displayY, numTrials
	 *             into struct (there are also "text" nodes, which are
	 *             effectively ignored (nothing is done with them)
	 *         (2) writes location of "trial" node in struct
	 */

	xmlChar *content;
	xmlNodePtr p = sessNode->children; // get ptr to first child node 

	if (DEBUG) printf(" debug: getSessionInfo - begin\n");	
	
	while (p != NULL) {
		if ((!xmlStrcmp(p->name, (const xmlChar *)"expName"))) {
			sessionParams.expName = xmlNodeGetContent(p) ;
				//o expName is now a pointer to the xml string
				//o don't free the content - we want to keep it for the whole session
				//o string is freed in endInterp function)

			////old way:
			//content = xmlNodeGetContent(p) ;
			//strcpy(sessionParams.expName
			//sessionParams.displayX = atoi(content) ;
			//xmlFree(content);
		}

		if ((!xmlStrcmp(p->name, (const xmlChar *)"sessNum"))) {
			content = xmlNodeGetContent(p) ;
			sessionParams.sessNum = atoi(content) ;
			xmlFree(content);
		}

		if ((!xmlStrcmp(p->name, (const xmlChar *)"displayX"))) {
			content = xmlNodeGetContent(p) ;
			sessionParams.displayX = atoi(content) ;
			xmlFree(content);
		}
		if ((!xmlStrcmp(p->name, (const xmlChar *)"displayY"))) {
			content = xmlNodeGetContent(p) ;
			sessionParams.displayY = atoi(content) ;
			xmlFree(content);
		}
		if ((!xmlStrcmp(p->name, (const xmlChar *)"numTrials"))) {
			content = xmlNodeGetContent(p) ;
			sessionParams.numTrials = atoi(content) ;
			xmlFree(content);
		}
		if ((!xmlStrcmp(p->name, (const xmlChar *)xmlTrialsName))) {
			trialsNode = p ;					// set locations of trialsNode
			currTrNode = trialsNode->children;	// set for trial#1 in getTrialParams()
		}
		
		p = p->next;
	}

	/* check that we have a trialsNode */
	if (trialsNode == NULL) {			// initialized as null in interpreter.h
		printf("ERROR: no \"trials node\"\n");
		return 1;
	}

	if (DEBUG) printf(" debug: getSessionInfo - end\n");

	return 0;
}

int getTrialParams(int tNum){
	/* parameter:  tNum - requested trial number
	 * actions:  fills in trialParams struct
	 *           sets objsNode var to "objects" node
	 * ref:  http://www.yolinux.com/TUTORIALS/GnomeLibXml2.html 
	 *       (how to get attribute values)
	 */

	xmlNodePtr p;				// for looping/parsing
	int value;					// hold a trial node's assigned number (from the xml)
	struct offsets * element;	// ptr to an element in lookup table (returned by findTableEntry)
	xmlChar *content;			// node content is parsed as strings
	int contentAsInt;
	struct tparams * tpptr = &trialParams;		// ptr to trialParams
	int returnCode=0;			// for getObjsParams

	if (DEBUG) printf(" debug: getTrialParams - begin - trial #%d\n",tNum);

	/*********************/
	/* reset trialParams */		
	/*********************/     
	if (DEBUG) printf("  checking if struct needs to be reset ...");
	if (currTrNum == 0) {
		// using value of "currTrNum" determine whether we need to reset struct
		// (it's initialized to 0 and there is no trial 0)
		if (DEBUG) printf(" no (first run)\n");
	}
	else {
		if (DEBUG) printf(" yes (resetting ...");
		resetTparams();
		if (DEBUG) printf(" done)\n");
	}

    /*************************************/
	/* check sequence of requested trial */
	/*   and find startnode for parsing  */
	/*************************************/
	// "p" determines where parsing starts
	if (tNum == currTrNum+1) {
		// expected behavior is that GE asks for trials in sequence
		currTrNum = tNum;		// set for next iteration 
		p = currTrNode;			// currTrNode holds previous trialnode (start searching from previous trialnode)
	}
	else {
		printf("Warning: requested out-of-sequence trial number. Last#=%d. Requested#=%d. Continuing ...\n",currTrNum,tNum);
		p = trialsNode->children;	// start search from beginning (at first child_node)
	}

	/****************************/
	/* look for requested trial */
	/****************************/
	// loop thru nodes (including Text & Comment nodes) looking for tNum
	while (p != NULL) {

		if ((!xmlStrcmp(p->name, (const xmlChar *)xmlTrialName))) {
			value = atoi(xmlGetProp(p,xmlNumberName));			// read attribute (i.e., trial "number")

			if (value == tNum) {	// check if this is the requested trial_number 
				currTrNode = p;		// set current_trial_node ptr
				break;				// stop looping (we found what we're looking for)
			}
		}
		p = p->next;
	}

	/* after loop, p either points to requested_trial_node or to null */
	if (p == NULL) {
		printf("Error:  didn't find trial node #%d\n",tNum);
		return 1;
	}

    /********************/
	/* get trial params */
	/********************/
	trialParams.trialNum = tNum ;	// WRITE TO STRUCT: trial number
	p=currTrNode->children;			// get the child_nodes of the trial node

	/* loop until we find "condition" param (must be the first param) */
	while ((xmlStrcmp(p->name, (const xmlChar *)xmlConditionName))) {
		p=p->next;
	}  

	/* at this point, we're at condition_node */
	trialParams.condNum  = atoi(xmlGetProp(currTrNode,xmlNumberName));	// WRITE TO STRUCT: condition number
	trialParams.condName = xmlNodeGetContent(p);						// WRITE TO STRUCT: condition name (really giving ptr to struct)

	/* now loop thru the rest of params */
	do {				// at start of do_loop, still at condition_node
		p=p->next;		// go to next node
		
		element = findTableEntry(p->name,tLookupTable,numElemTtable);	// returns either ptr or null
		if (element) {
			// o element is in lookup table, which means it is a value we want
			// o all fields from this point on are ints 
			//   (if params are later added that are not ints, then must check "type" field of struct offsets)
			content = xmlNodeGetContent(p);		// get string
			contentAsInt = atoi(content);		// convert to int
			*(int *)((char *)tpptr + element->value) = contentAsInt;		
					// o WRITE TO STRUCT:  use offset from lookup_table to write into struct
					// o ref:  http://docs.linux.cz/programming/c/www.eskimo.com/~scs/C-faq/q2.15.html
			xmlFree(content);
		}
	} while ((xmlStrcmp(p->name, (const xmlChar *)xmlObjectsName)));
		// o loop until the "objects" node (there must be an objects_node, else we'll loop forever)
		// o loop over (i.e., ignore) text/comments nodes
		// o using lookup table to write into struct, so xml_node_names must be the same as lookup_table_names

	/* at this point, p points to "objects" node */

	/*************************/
	/* get object parameters */
	/*************************/

	/* create struct for object params */
	trialParams.objInfo = malloc(sizeOparams * trialParams.numObjects);

	/* get info */
	if (DEBUG) printf(" debug: getTrialParams - calling getObjsParams\n");
	//returnCode = getObjsParams(p, trialParams.objInfo);
	returnCode = getObjsParams(p);
	if (returnCode != 0) {
		printf("ERROR in getObjsParams\n");
		return 1;
	}
	if (DEBUG) printf(" debug: getTrialParams - returned from getObjsParams\n");

	if (DEBUG) printf(" debug: getTrialParams - end\n");
	return 0;
}

int getObjsParams (xmlNodePtr objsNodePtr) {
	/* parameter:  objsNodePtr - pointer to "objects" node
	 */

	xmlChar * ocontent;						// for node content
	struct offsets * oelement;				// ptr to an element in oLookupTable (returned by findTableEntry)
	struct oparams ** opptr;				// ptr to obj params (for writing into array of structs)

	xmlNodePtr op = objsNodePtr->children;	// working ptr (get list of "object" nodes)
	xmlNodePtr opch;						// will traverse child_nodes (parameters) of each "object"
	int i = 0;								// for looping through "object" nodes

	if (DEBUG) printf(" debug: getObjsParams - begin\n");

	/* loop thru "object" nodes */
	while (op != NULL) {

		/* only want "object" nodes (i.e., ignore "Text" nodes */
		if ((!xmlStrcmp(op->name, (const xmlChar *)xmlObjectName))) {

			/* get obj num */
			trialParams.objInfo[i].objNum = atoi(xmlGetProp(op,xmlNumberName));		// WRITE TO STRUCT: objNum

			/* get addr of obj's "oparams" struct */
			opptr  = &trialParams.objInfo[i];
			
			/* set up parameter list */
			opch = op->children;		// get list of child nodes (parameters) for "object"

			/* get rest of info */
			while (opch != NULL) {		// loop through child nodes
				
				oelement = findTableEntry(opch->name,oLookupTable,numElemOtable);	// returns either ptr or null
				if (oelement) {
					ocontent = xmlNodeGetContent(opch);								// get string
					
					/* find out param type */
					if (oelement->type == typeI){
						*(int *)((char *)opptr + oelement->value) = atoi(ocontent);
						xmlFree(ocontent);
					}
					else if (oelement->type == typeC){
						*(int *)((char *)opptr + oelement->value) = ocontent;
						// don't free "ocontent" - we'll keep a ptr to this string for duration of trial
						//                       - string will be freed in resetTparams function
					}
				}

				opch=opch->next;	// move to next child node (parameter)
			}

			i++;	// this was a valid node - increment array element
		}
		op=op->next;	// get next child node
	}

	if (DEBUG) printf(" debug: getObjsParams - end\n");
	return 0;
}

int resetTparams(void){
		int i;
		struct tparams * tpptr = &trialParams;

		// free strings (they were created via the xmlNodeGetContent function in getObjsParams)
		for (i=0; i<trialParams.numObjects; i++){
			//xmlFree(trialParams.objInfo[i].objFile);
			xmlFree(trialParams.objInfo[i].objPath);
		}

		// free array
		if (trialParams.objInfo != NULL) {
			free(trialParams.objInfo);
			trialParams.objInfo=NULL;
		}

		// free string (created via xmlNodeGetContent)
		if (trialParams.condName != NULL) {
			xmlFree(trialParams.condName);
		}

		// reset values (only trialParams; objInfo array has been freed)
		for (i=0; i<numElemTtable; i++) {
			if (tLookupTable[i].type == typeI) {
				*(int *)((char *)tpptr + tLookupTable[i].value) = -1;
			}
			else if (tLookupTable[i].type == typeC) {
				*(int *)((char *)tpptr + tLookupTable[i].value) = NULL;
			}
		}
		return 0;
}

void endInterp(void){
	resetTparams();						//frees structures/strings 
	xmlFree(sessionParams.expName);		//free the string (from getSessionsParams function)
	xmlFreeDoc(xDoc);					//free dom
}


/*****************************/
/* print functions for debug */
/*****************************/

void printSessionInfo(void) {
	if (DEBUG) printf(" debug: printSessionInfo - begin\n");
	printf("  sessionParams.expName = %s\n", sessionParams.expName);
	printf("  sessionParams.sessNum = %d\n", sessionParams.sessNum);
	printf("  sessionParams.displayX = %d\n", sessionParams.displayX);
	printf("  sessionParams.displayY = %d\n", sessionParams.displayY);
	printf("  sessionParams.numTrials = %d\n", sessionParams.numTrials);
	if (DEBUG) printf(" debug: printSessionInfo - end\n");
}

void printNodes(xmlNodePtr xnptr, int boolPrintTextNodes) {
	/* can change 0/1 to false/true - interpreter.h has define-s */

	/* boolPrintTextNodes:  true = 1
	 *                      false = 0
	 * The libxml2 parser keeps track of whitespace as "Text" nodes.
	 *   (This behavior is (1) primarily due to the lack of DTD in the xml .session file
	 *    and (2) may or may not be avoided - when I used a DTD in a small xml file, the
	 *    "Text" nodes still appeared.)
	 * We're not interested in the whitespace, so we're not interested in the "Text" nodes.
	 * But for debugging, seeing the "Text" nodes may be helpful.
	 */

	xmlNodePtr p ;
	char * TextName = "text" ;

	// check that parameter is either 0 or 1
	if (boolPrintTextNodes != 0 && boolPrintTextNodes != 1) {
		printf("error - illegal parameter sent to printNodes()\n");
	}

	p = xnptr->children ; // get list of child nodes
	while (p != NULL) {
		if (boolPrintTextNodes) {
			printf("%s\n",p->name);
		}
		else {
			if ((xmlStrcmp(p->name, (const xmlChar *)TextName))) { // evaluates to match for non-Text node
				printf("%s\n",p->name);
			}
		}
		p = p->next ;
	}
} // end printNodes()

void printTrialInfo(void) {
	/* o for debug
	 * o prints out info for trialParams struct
	 */
	int i ;			// for looping over obj info
	int n ;			// convenience var for printout

	if (DEBUG) printf(" debug: printTrialInfo - begin\n");
	printf("  trialParams.trialNum=%d\n",trialParams.trialNum);
    printf("  trialParams.condNum=%d\n",trialParams.condNum);
    printf("  trialParams.condName=%s\n",trialParams.condName);
	printf("  trialParams.isFixMarker=%d\n",trialParams.isFixMarker);
	printf("  trialParams.duration=%d\n",trialParams.duration);
	printf("  trialParams.gridDisplay=%d\n",trialParams.gridDisplay);
    printf("  trialParams.bgColorA=%d\n",trialParams.bgColorA);
	printf("  trialParams.bgColorR=%d\n",trialParams.bgColorR);
	printf("  trialParams.bgColorG=%d\n",trialParams.bgColorG);
	printf("  trialParams.bgColorB=%d\n",trialParams.bgColorB);
    printf("  trialParams.fgColorA=%d\n",trialParams.fgColorA);
    printf("  trialParams.fgColorR=%d\n",trialParams.fgColorR);
	printf("  trialParams.fgColorG=%d\n",trialParams.fgColorG);
	printf("  trialParams.fgColorB=%d\n",trialParams.fgColorB);
	printf("  trialParams.isBounce=%d\n",trialParams.isBounce);
	printf("  trialParams.minBounceDist=%d\n",trialParams.minBounceDist);
	printf("  trialParams.minStartDist=%d\n",trialParams.minStartDist);
	printf("  trialParams.numObjects=%d\n",trialParams.numObjects);
	printf("  trialParams.numTargets=%d\n",trialParams.numTargets);
	
	for (i=0;i<trialParams.numObjects;i++) {
		n=i+1;
		printf("  trialParams.objInfo[%d].objnum=%d\n",n,trialParams.objInfo[i].objNum);
        //printf("  trialParams.objInfo[%d].objFile=%s\n",n,trialParams.objInfo[i].objFile);
        printf("  trialParams.objInfo[%d].objPath=%s\n",n,trialParams.objInfo[i].objPath);
		printf("  trialParams.objInfo[%d].objIsTarget=%d\n",n,trialParams.objInfo[i].objIsTarget);
		printf("  trialParams.objInfo[%d].objPanel=%d\n",n,trialParams.objInfo[i].objPanel);
		printf("  trialParams.objInfo[%d].objMinSpeedH=%d\n",n,trialParams.objInfo[i].objMinSpeedH);
		printf("  trialParams.objInfo[%d].objMaxSpeedH=%d\n",n,trialParams.objInfo[i].objMaxSpeedH);
		printf("  trialParams.objInfo[%d].objMinSpeedV=%d\n",n,trialParams.objInfo[i].objMinSpeedV);
		printf("  trialParams.objInfo[%d].objMaxSpeedV=%d\n",n,trialParams.objInfo[i].objMaxSpeedV);
	}

	if (DEBUG) printf(" debug: printTrialInfo - end\n");
}

/**************/
/* references */
/**************/
/*
 * references for code:
 * 
 * o http://xmlsoft.org/tutorial/apc.html
 *   (traversing dom tree)
 *
 * o http://www.yolinux.com/TUTORIALS/GnomeLibXml2.html
 *   (example dom parse)
 *
 * o http://libiya.upf.es/www-storage/glibc/libc_9.html 
 *   (sorting example)
 *
 */

/*************************/
/* notes on lookup table */
/*************************/
/* lookup table - used to dynamically find struct member names
 *
 *  o used in following situation:  
 *    -the interpreter is parsing the trial info in the .session file
 *    -it finds "someParameter" and reads its value
 *    -i don't want to code 19 "if" statements saying
 *     "if someParameter = trialNum then update trialParams.trialNum"
 *     --b/c code would have to do twelve comparisons for each line parsed
 *     --b/c if a param is added, the actual parsing code would have to be updated
 *     --instead, when new parameter is added to .session file, new info has to be added to the struct, lookup table,
 *       print functions, and init functions
 *    
 *  o goal was to have faster code than 19 "if" statements
 *
 *  o compare to the three "if" statements in getSessionInfo()
 *    -in the getSessionInfo method, if a new session-wide parameter is added, the parsing code _does_ have to be updated
 *
 *  o in order to use the only C-provided search function (bsearch), 
 *    this table has to be sorted (in ascendeding order) before it is bsearched
 *
 *  o the sorting (via the only C-provided sort function qsort) must happen in an initialization routine
 *
 *  o Refs:
 *    -example (http://libiya.upf.es/www-storage/glibc/libc_9.html)
 *    -the C FAQ (http://docs.linux.cz/programming/c/www.eskimo.com/~scs/C-faq/q2.15.html)
 *    -mailing list (http://www.thescripts.com/forum/thread217699.html)
 *    -K&R (p. 253)
 *
 */
