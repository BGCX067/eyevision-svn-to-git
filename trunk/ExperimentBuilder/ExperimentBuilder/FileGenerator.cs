using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.Xml;
using System.Drawing;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;

namespace ExperimentBuilder
{
    /// <summary>
    /// Generates files for the Experiment Builder. It serializes the experiment objects (and its dependenants) in a file and generates 
    /// the XML file for the Graphics Engine. 
    /// </summary>
    public class FileGenerator
    {
        /* This variable is used for the singleton behaviour of this class.
         It stores the actual instance of this class. */
        private static FileGenerator instance = new FileGenerator();

        private static string defaultDir = @"c:\EVS\";

        /// <summary>
        /// The default dir where all files and folders are supposed to be generated by the Experiment Builder. Set to C:\EVS\
        /// </summary>
        public string DefaultDir
        {
            get { return defaultDir; }
            set { defaultDir = value; }
        }

        private static string[] subDir = { "bin", "doc", "ext", "include" };

        /// <summary>
        /// The list of sub directories the Exeriment Builder generates. Set to bin,doc,ext,include
        /// </summary>
        public string[] SubDir
        {
            get { return subDir; }
            set { subDir = value; }
        }

        private static string experimentDir = defaultDir+"experiments";

        /// <summary>
        /// The directory where the experiments are stored. Set to experiments
        /// </summary>
        public string ExperimentDir
        {
            get { return experimentDir; }
            set { experimentDir = value; }
        }

        private static string sessionDirPrefix = "Sess";
        
        /// <summary>
        /// The Prefix for all Session Files. Set to Sess
        /// </summary>
        public string SessionDirPrefix
        {
            get { return sessionDirPrefix; }
            set { sessionDirPrefix = value; }
        }

        private static string perfDir = experimentDir + @"\"+ "perf";

        /// <summary>
        /// The folder that contains the performance files. Set to perf
        /// </summary>
        public string PerfDir
        {
            get { return perfDir; }
            set { perfDir = value; }
        }

        private static string imageSubDir = "images";

        /// <summary>
        /// The folder that contains the images. Set to images
        /// </summary>
        public string ImageSubDir
        {
            get { return imageSubDir; }
            set { imageSubDir = value; }
        }

        /// <summary>
        /// Generate the Session files in the specified experiment folder. 
        /// </summary>
        /// <param name="experiment">The experiment object containing all the experiment data.</param>
        /// <returns>True if the file generation was succesful.</returns>
        public bool generateSessionFiles(ExperimentDescriptor experiment) {

            Random randTrial = new Random();
            Random randBlock = new Random();

            Directory.CreateDirectory(experiment.ExperimentFolder);
            Directory.CreateDirectory(experiment.ExperimentFolder + @"\" + ImageSubDir);
            for (int s = 1; s <= experiment.NumberSessionFiles; s++)
            {
                XmlWriterSettings settings = new XmlWriterSettings();
                settings.Encoding = Encoding.GetEncoding("ISO-8859-1");
                settings.Indent = true;
                settings.IndentChars = ("    ");
                Directory.CreateDirectory(experiment.ExperimentFolder + @"\" + sessionDirPrefix + s);
                //Directory.CreateDirectory(experiment.ExperimentFolder + @"\" + sessionDirPrefix+s+@"\"+ImageSubDir);
                using (XmlWriter writer = XmlWriter.Create(experiment.ExperimentFolder + @"\" + sessionDirPrefix + s + @"\"+ experiment.ExperimentName + "_" + sessionDirPrefix + s + ".session", settings))
                {
                    writer.WriteStartElement("experiment");

                    writer.WriteStartElement("session");

                    writer.WriteElementString("expName", experiment.ExperimentName);
                    writer.WriteElementString("sessNum", s.ToString());
                    writer.WriteElementString("displayX", experiment.DisplayX.ToString());
                    writer.WriteElementString("displayY", experiment.DisplayY.ToString());
                    writer.WriteElementString("numTrials", experiment.NumberTrials.ToString());


                    writer.WriteStartElement("trials");

                    List<int> trialBlockRand = new List<int>(experiment.SessionList.TrialList.Count);

                    int trialCount = 0;
                    for (int count = 0; count < experiment.SessionList.TrialList.Count; count++)  
                    {
                        int nextTrialNumber = 0;
                        do
                        {
                            nextTrialNumber = randBlock.Next(0, experiment.SessionList.TrialList.Count);
                        } while (trialBlockRand.Contains(nextTrialNumber));
                        trialBlockRand.Add(nextTrialNumber);

                        TrialDescriptor trial = experiment.SessionList.TrialList[nextTrialNumber];
                        for (int i = 0; i < trial.NumberTrials; i++)
                        {
                            writer.WriteStartElement("trial");
                            writer.WriteAttributeString("number", (++trialCount).ToString());

                            writer.WriteStartElement("condition");
                            //writer.WriteElementString("condition", trial.TrialName);
                            int conditionNr = count;
                            int conditionNrCount = 0;
                            foreach (TrialDescriptor findConditionNumber in experiment.SessionList.TrialList)
                            {
                                conditionNrCount++;
                                if (findConditionNumber.TrialName.Equals(trial.TrialName))
                                {
                                    conditionNr = conditionNrCount;
                                    break;
                                }
                            }
                            writer.WriteAttributeString("number", conditionNr.ToString());
                            writer.WriteString(trial.TrialName);
                            writer.WriteEndElement();

                            if (trial.FixationMarker)
                                writer.WriteElementString("isFixMarker", "1");
                            else
                                writer.WriteElementString("isFixMarker", "0");

                            int duration_ms = trial.Duration*1000;
                            writer.WriteElementString("duration", duration_ms.ToString());

                            if (trial.GridDisplayVertical && trial.GridDisplayHorizontal)
                                writer.WriteElementString("gridDisplay", "3");
                            else if (trial.GridDisplayVertical && !trial.GridDisplayHorizontal)
                                writer.WriteElementString("gridDisplay", "2");
                            else if (!trial.GridDisplayVertical && trial.GridDisplayHorizontal)
                                writer.WriteElementString("gridDisplay", "1");
                            else
                                writer.WriteElementString("gridDisplay", "0");

                            writer.WriteElementString("bgColorA", Color.FromArgb(trial.BackgroundColor).A.ToString());
                            writer.WriteElementString("bgColorR", Color.FromArgb(trial.BackgroundColor).R.ToString());
                            writer.WriteElementString("bgColorG", Color.FromArgb(trial.BackgroundColor).G.ToString());
                            writer.WriteElementString("bgColorB", Color.FromArgb(trial.BackgroundColor).B.ToString());

                            writer.WriteElementString("fgColorA", Color.FromArgb(trial.ForegroundColor).A.ToString());
                            writer.WriteElementString("fgColorR", Color.FromArgb(trial.ForegroundColor).R.ToString());
                            writer.WriteElementString("fgColorG", Color.FromArgb(trial.ForegroundColor).G.ToString());
                            writer.WriteElementString("fgColorB", Color.FromArgb(trial.ForegroundColor).B.ToString());

                            if (trial.Bouncing)
                                writer.WriteElementString("isBounce", "1");
                            else
                                writer.WriteElementString("isBounce", "0");

                            if (trial.Bouncing)
                                writer.WriteElementString("minBounceDist", trial.BouncingDistance.ToString());
                            else
                                writer.WriteElementString("minBounceDist", "");

                            writer.WriteElementString("minStartDist", trial.StartingDistance.ToString());

                            writer.WriteElementString("numObjects", trial.MObjectList.Count.ToString());

                            int numTargets = 0;
                            foreach (MObjectDescriptor mObject in trial.MObjectList)
                            {
                                if (mObject.TargetObject) numTargets++;
                            }
                            writer.WriteElementString("numTargets", numTargets.ToString());
                            
                            writer.WriteStartElement("objects");
                            int objectCount = 0;
                            foreach (MObjectDescriptor mObject in trial.MObjectList)
                            {
                                writer.WriteStartElement("object");
                                writer.WriteAttributeString("number", (++objectCount).ToString());

                                string filename = "";
                                if (mObject.Type.Contains("Rectangle"))
                                {
                                    filename = "rect_" + mObject.Width.ToString() + "x" + mObject.Height.ToString() + "_" + mObject.Color.ToString() + ".bmp";
                                    if (!(File.Exists(experiment.ExperimentFolder + @"\" + ImageSubDir + @"\" + filename)))
                                    {
                                        Bitmap objectBMP = createBMP(mObject.Type, mObject.Width, mObject.Height, Color.FromArgb(mObject.Color), Color.FromArgb(trial.BackgroundColor));
                                        objectBMP.Save(experiment.ExperimentFolder + @"\" + ImageSubDir + @"\" + filename);
                                    }
                                }
                                else if (mObject.Type.Contains("Circle"))
                                {
                                    filename = "elli_" + mObject.Width.ToString() + "x" + mObject.Height.ToString() + "_" + mObject.Color.ToString() + ".bmp";
                                    if (!(File.Exists(experiment.ExperimentFolder + @"\" + ImageSubDir + @"\" + filename)))
                                    {
                                        Bitmap objectBMP = createBMP(mObject.Type, mObject.Width, mObject.Height, Color.FromArgb(mObject.Color), Color.FromArgb(trial.BackgroundColor));
                                        objectBMP.Save(experiment.ExperimentFolder + @"\" + ImageSubDir + @"\" + filename);
                                    }
                                }
                                else if (mObject.Type.Contains("File"))
                                {
                                    filename = mObject.Filename.Substring(mObject.Filename.LastIndexOf("\\") + 1);
                                    if (!(File.Exists(experiment.ExperimentFolder + @"\" + ImageSubDir + @"\" + filename)))
                                    {
                                        Bitmap objectBMP = new Bitmap(mObject.Filename);
                                        objectBMP.Save(experiment.ExperimentFolder + @"\"  + ImageSubDir + @"\" + filename);
                                    }
                                }

                                writer.WriteElementString("objPath", experiment.ExperimentFolder.Replace("\\", "\\\\") +@"\\" + ImageSubDir + @"\\" + filename);

                                if (mObject.TargetObject)
                                    writer.WriteElementString("objIsTarget", "1");
                                else
                                    writer.WriteElementString("objIsTarget", "0");

                                writer.WriteElementString("objPanel", mObject.StartPanel.ToString());

                                writer.WriteElementString("objMinSpeedH", mObject.MinSpeedHorizontal.ToString());
                                writer.WriteElementString("objMaxSpeedH", mObject.MaxSpeedHorizontal.ToString());
                                writer.WriteElementString("objMinSpeedV", mObject.MinSpeedVertical.ToString());
                                writer.WriteElementString("objMaxSpeedV", mObject.MaxSpeedVertical.ToString());


                                writer.WriteEndElement(); //end object-tag
                            }
                            writer.WriteEndElement(); //end objects-tag


                            writer.WriteEndElement(); //end trial-tag
                        }
                    }


                    writer.WriteEndElement(); //end trials-tag
                    writer.WriteEndElement(); //end session-Tag
                    writer.WriteEndElement(); //end experiment-Tag

                    writer.Flush();
                }
            }
            return true;



        }

        /// <summary>
        /// Serializes the experiment object in a file.
        /// </summary>
        /// <param name="experiment">Experiment object to be serialized</param>
        /// <param name="fileName">The file name for the object. </param>
        /// <returns>True when the generation was succesful.</returns>
        public bool saveExperiment(ExperimentDescriptor experiment,string fileName)
        {
            IFormatter formatter = new BinaryFormatter();
            using (Stream stream = new FileStream(fileName, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                formatter.Serialize(stream, experiment);
            }
            return true;
        }

        /// <summary>
        /// Loads a serialized experiment object
        /// </summary>
        /// <param name="fileName">File name of the experiment object to load.</param>
        /// <returns>The experiment object that has been loaded.</returns>
        public ExperimentDescriptor loadExperiment(string fileName)
        {
            IFormatter formatter = new BinaryFormatter();
            using (Stream stream = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read))
            {
                return (ExperimentDescriptor)formatter.Deserialize(stream);
            }

        }

        /// <summary>
        /// Creates an image. Two shapes can be created: "Ellipse/Circles" or "Squares/Rectangle".
        /// </summary>
        /// <param name="type">Either "Rectangle" or "Ellipse".</param>
        /// <param name="x">Either the width of the rectangle or the x-radius of the ellipse.</param>
        /// <param name="y">Either the height of the rectangle or the y-radius of the ellipse. </param>
        /// <param name="color">The foreground color for the object.</param>
        /// <param name="backcolor">The background color of the object.(Only useful for ellipses).</param>
        /// <returns>The created image. </returns>
        public Bitmap createBMP(string type, int x, int y, Color color, Color backcolor)
        {
            Bitmap newBMP = new Bitmap(x, y);
            Graphics g = Graphics.FromImage(newBMP);
            Brush brush = new SolidBrush(color);
            Brush backBrush = new SolidBrush(backcolor);
            if (type.Contains("Rectangle"))
            {
                g.FillRectangle(brush, 0, 0, x, y);
            }
            else if (type.Contains("Ellipse"))
            {
                g.FillRectangle(backBrush, 0, 0, x, y);
                g.FillEllipse(brush, 0, 0, x, y);
            }
            g.Flush();
            g.Dispose();
            return newBMP;
        }

        /// <summary>
        /// Creates the default Directory, if it doesn't exist. 
        /// </summary>
        public void createDefaultDir()
        {
            if (!Directory.Exists(defaultDir)) Directory.CreateDirectory(defaultDir);
        }

        /// <summary>
        /// Creates all the subdirs, if they are not already existing. 
        /// </summary>
        public void createSubDirs()
        {
            foreach (string dir in subDir)
                if (!Directory.Exists(defaultDir + dir)) Directory.CreateDirectory(defaultDir + dir);
            if (!Directory.Exists(experimentDir)) Directory.CreateDirectory(experimentDir);
            if (!Directory.Exists(perfDir)) Directory.CreateDirectory(perfDir);
        }

        /// <summary>
        /// Private Constructor. Use getInstance to get an Instance of this object. 
        /// </summary>
        private FileGenerator()
        {
            ;
        }

        /// <summary>
        /// Return the actual instance of the object. If no instance exists, a new one will be generated. There can
        /// be no more than one instance at a time of this object. 
        /// </summary>
        /// <returns>The actual instance of the FileGenerator</returns>
        public static FileGenerator getInstance()
        {
            return instance;
        }

    }
 
}
